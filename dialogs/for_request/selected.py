import datetime as dt

import aiohttp
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import PhotoSize
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_dialog import DialogManager, ShowMode, StartMode
from bson import ObjectId
from pytz import timezone

from scheduler.scheduler_funcs import send_morning_report
import utils.constants as const
from config.bot_config import bot
from config.mongo_config import buffer, gpa, paths, req_counter, reqs
from config.telegram_config import EXPLOIT_GROUP_ID
from dialogs.for_request.states import Request
from utils.utils import report_error


FILE_LABELS = {
    'protocol': 'üìù –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–¥–∞—á–∏ –∑–∞—â–∏—Ç',
    'act': 'üìÑ –ê–∫—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ú–†–†',
    'card': 'üìú –ö–∞—Ä—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ì–ü–ê –∫ –ø—É—Å–∫—É',
    'epb': 'üìã –≠–ü–ë',
    'logbook': 'üìë –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º—É–ª—è—Ä',
    'priority': 'üßæ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–ø—É—Å–∫–∞ –ì–ü–ê',
}

DATE_ERROR_MSG = (
    '–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞.\n'
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)'
)
TIME_ERROR_MSG = (
    '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ —Ç–µ–∫—É—â–µ–º—É.\n'
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ.\n'
    '–ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—É—Å–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.'
)
STATE_MAPPING = {
    'Request:select_resource': Request.select_resource,
    'Request:select_resource_act': Request.select_resource_act,
    'Request:input_resource_act_file': Request.input_resource_act_file,
    'Request:input_out_of_resource_reason': Request.input_out_of_resource_reason,
    'Request:select_protocol': Request.select_protocol,
    'Request:input_epb_file': Request.input_epb_file,
    'Request:input_logbook_file': Request.input_logbook_file,
}


def get_next_sequence_value(sequence_name):
    counter = req_counter.find_one_and_update(
        {'_id': sequence_name},
        {'$inc': {'seq': 1}},
        return_document=True
    )
    return counter['seq']


async def is_holiday(target_date: dt.date) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º –¥–Ω—ë–º –≤ –†–æ—Å—Å–∏–∏"""
    year = target_date.year
    url = f"https://isdayoff.ru/api/getdata?year={year}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.text()
                    # –î–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–¥–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≥–æ–¥–∞
                    day_of_year = target_date.timetuple().tm_yday - 1
                    return data[day_of_year] == '1'  # '1' - –ø—Ä–∞–∑–¥–Ω–∏–∫/–≤—ã—Ö–æ–¥–Ω–æ–π
    except Exception as e:
        await report_error(e)
    return False


async def on_main_menu(callback, widget, manager: DialogManager):
    await manager.start(Request.select_station, mode=StartMode.RESET_STACK)


async def return_from_resource(callback, widget, manager: DialogManager):
    context = manager.current_context()
    req_type = context.dialog_data['req_type']
    if req_type == 'with_approval':
        await manager.switch_to(Request.select_time)
    else:
        await manager.switch_to(Request.select_epb)


async def return_to_resource_act(callback, widget, manager: DialogManager):
    await manager.switch_to(Request.select_resource_act)


async def return_to_previous_state(callback, button, manager: DialogManager):
    previous_state_str = manager.dialog_data.get("previous_state")
    if previous_state_str and previous_state_str in STATE_MAPPING:
        await manager.switch_to(STATE_MAPPING[previous_state_str])
    else:
        await manager.back()


async def on_select_category(callback, widget, manager: DialogManager):
    category = widget.widget_id
    if category == 'paths':
        await manager.switch_to(Request.paths_info)
    elif category == 'new_request':
        await manager.switch_to(Request.select_type_request)
    elif category == 'archive_requests':
        await manager.switch_to(Request.select_sorting_requests)
    elif category == 'inwork_requests':
        await manager.switch_to(Request.inwork_requests)


async def on_select_type_request(callback, widget, manager: DialogManager):
    context = manager.current_context()
    req_type = widget.widget_id
    context.dialog_data.update(req_type=req_type)
    await manager.switch_to(Request.select_station)


async def on_path_selected(callback, widget, manager: DialogManager):
    context = manager.current_context()
    _, _, path_type = widget.widget_id.split('_')
    context.dialog_data.update(path_type=path_type)
    await manager.switch_to(Request.select_num_stages)


async def on_num_stages_selected(callback, widget, manager: DialogManager):
    context = manager.current_context()
    _, _, num_stages = widget.widget_id.split('_')
    context.dialog_data.update(num_stages=num_stages)
    await manager.switch_to(Request.select_majors)


async def back_and_erase_widget_click(callbac, button, manager: DialogManager):
    widget = manager.find('s_majors')
    await widget.reset_checked()
    await manager.back()


async def on_majors_done(callback, widget, manager: DialogManager):
    context = manager.current_context()
    widget = manager.find('s_majors')
    context.dialog_data.update(majors=widget.get_checked())
    await manager.switch_to(Request.path_confirm)


async def path_save(callback, widget, manager: DialogManager):
    context = manager.current_context()
    num_stages = int(context.dialog_data['num_stages'])
    majors = context.dialog_data['majors']
    path_name = const.PATH_TYPE[context.dialog_data['path_type']]
    stages = {}
    for stage_num in range(1, num_stages + 1):
        stages[str(stage_num)] = int(majors[stage_num - 1])
    paths.update_one(
        {'path_type': path_name},
        {'$set': {'num_stages': num_stages, 'stages': stages}},
        upsert=True
    )
    widget = manager.find('s_majors')
    await widget.reset_checked()
    await manager.switch_to(Request.path_complete)


async def on_station_done(callback, widget, manager: DialogManager, station):
    context = manager.current_context()
    context.dialog_data.update(station=station)
    await manager.switch_to(Request.select_shop)


async def on_shop_done(callback, widget, manager: DialogManager, shop):
    context = manager.current_context()
    context.dialog_data.update(shop=shop)
    await manager.switch_to(Request.select_gpa)


async def on_gpa_done(callback, widget, manager: DialogManager, gpa_num):
    context = manager.current_context()
    context.dialog_data.update(gpa=gpa_num)
    await manager.switch_to(Request.select_epb)


async def on_epb(callback, widget, manager: DialogManager):
    epb = widget.widget_id
    context = manager.current_context()
    req_type = context.dialog_data['req_type']
    if epb == 'epb_yes':
        context.dialog_data.update(epb=epb)
        if req_type == 'with_approval':
            await manager.switch_to(Request.input_epb_file)
        else:
            await manager.switch_to(Request.input_epb_file)
    else:
        await manager.switch_to(Request.show_reject_info)


async def on_epb_file(message, message_input, manager: DialogManager):
    await handle_file_upload(
        message=message,
        manager=manager,
        dialog_key='epb_files',
        next_state=Request.input_epb_file,
    )


async def on_epb_file_done(message, message_input, manager):
    # manager.show_mode = ShowMode.DELETE_AND_SEND
    context = manager.current_context()
    req_type = context.dialog_data['req_type']
    manager.dialog_data["previous_state"] = str(Request.input_epb_file.state)
    if req_type == 'with_approval':
        await manager.switch_to(Request.select_date)
    else:
        today = dt.datetime.now()
        context.dialog_data.update(req_date=today.strftime('%d.%m.%Y'))
        context.dialog_data.update(req_time=today.strftime('%H:%M'))
        await manager.switch_to(Request.select_resource)


async def on_select_date(callback, widget, manager: DialogManager, clicked_date):
    context = manager.current_context()
    req_type = context.dialog_data['req_type']
    today = dt.datetime.now().date()
    if req_type == 'with_approval':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É
        if clicked_date < today:
            error_message = "‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É."
            await callback.answer(error_message, show_alert=True)
            await manager.switch_to(Request.select_date)
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        if clicked_date.weekday() in (5, 6):
            error_message = "‚ùå –í—ã–±—Ä–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å (—Å—É–±–±–æ—Ç–∞/–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å."
            await callback.answer(error_message, show_alert=True)
            await manager.switch_to(Request.select_date)
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å
        if await is_holiday(clicked_date):
            error_message = "‚ùå –í—ã–±—Ä–∞–Ω –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å."
            await callback.answer(error_message, show_alert=True)
            await manager.switch_to(Request.select_date)
            return
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        req_date = clicked_date.strftime('%d.%m.%Y')
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É
        if clicked_date < today:
            error_message = "‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É."
            await callback.answer(error_message, show_alert=True)
            await manager.switch_to(Request.select_date)
            return
        req_date = clicked_date.strftime('%d.%m.%Y')
    context.dialog_data.update(req_date=req_date)
    await manager.switch_to(Request.select_time)


async def on_select_time(callback, widget, manager: DialogManager, time: str):
    context = manager.current_context()
    today = dt.datetime.now().date()
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    req_date_str = context.dialog_data.get('req_date')
    try:
        req_date = dt.datetime.strptime(req_date_str, '%d.%m.%Y').date()
    except (ValueError, TypeError):
        req_date = today
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    try:
        selected_time = dt.datetime.strptime(time, '%H:%M').time()
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
        return
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    if req_date == today:
        now = dt.datetime.now()
        current_time_plus_hour = (now + dt.timedelta(hours=1)).time()
        if selected_time < current_time_plus_hour:
            await callback.answer(TIME_ERROR_MSG, show_alert=True)
            await manager.switch_to(Request.select_time)
            return
    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    context.dialog_data['req_time'] = time
    await manager.switch_to(Request.select_resource)


async def on_resource(callback, widget, manager: DialogManager):
    resource = widget.widget_id
    context = manager.current_context()
    context.dialog_data.update(resource=resource)
    if resource == 'resource_yes':
        await manager.switch_to(Request.select_resource_act)
    elif resource == 'resource_no':
        context.dialog_data.update(resource_act='–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
        manager.dialog_data["previous_state"] = str(Request.select_resource.state)
        context.dialog_data.update(logbook='logbook_yes')
        await manager.switch_to(Request.input_logbook_file)


async def on_logbook_file(message, message_input, manager: DialogManager):
    await handle_file_upload(
        message=message,
        manager=manager,
        dialog_key='logbook_files',
        next_state=Request.input_logbook_file,
    )


async def on_logbook_file_done(message, message_input, manager):
    manager.dialog_data["previous_state"] = str(Request.input_logbook_file.state)
    await manager.switch_to(Request.select_protocol)


async def on_resource_act(callback, widget, manager: DialogManager):
    resource_act = widget.widget_id
    context = manager.current_context()
    context.dialog_data.update(resource_act=resource_act)
    if resource_act == 'resource_act_yes':
        await manager.switch_to(Request.input_resource_act_file)
    elif resource_act == 'resource_act_no':
        await manager.switch_to(Request.input_out_of_resource_reason)


async def on_resource_act_file(message, message_input, manager):
    await handle_file_upload(
        message=message,
        manager=manager,
        dialog_key='resource_act_files',
        next_state=Request.input_resource_act_file,
    )


async def on_resource_act_file_done(message, message_input, manager):
    manager.dialog_data["previous_state"] = str(Request.input_resource_act_file.state)
    await manager.switch_to(Request.select_protocol)


async def on_input_resource_reason(callback, widget, manager: DialogManager, reason_text):
    context = manager.current_context()
    context.dialog_data.update(out_of_resource_reason_text=reason_text)
    await delete_callback_message(callback)
    manager.dialog_data["previous_state"] = str(Request.input_out_of_resource_reason.state)
    await manager.switch_to(Request.select_protocol)


async def on_protocol(callback, widget, manager: DialogManager):
    protocol = widget.widget_id
    context = manager.current_context()
    context.dialog_data.update(protocol=protocol)
    if protocol == 'protocol_yes':
        await manager.switch_to(Request.input_protocol_file)
    elif protocol == 'protocol_no':
        await manager.switch_to(Request.show_reject_info)


async def on_protocol_act_file(message, message_input, manager):
    await handle_file_upload(
        message=message,
        manager=manager,
        dialog_key='protocol_files',
        next_state=Request.input_protocol_file,
    )


async def on_protocol_act_file_done(message, message_input, manager):
    manager.dialog_data["previous_state"] = str(Request.input_protocol_file.state)
    await manager.switch_to(Request.select_card)


async def on_card(callback, widget, manager: DialogManager):
    card = widget.widget_id
    context = manager.current_context()
    context.dialog_data.update(card=card)
    if card == 'card_yes':
        await manager.switch_to(Request.input_card_file)
    elif card == 'card_no':
        await manager.switch_to(Request.show_reject_info)


async def on_card_file(message, message_input, manager):
    await handle_file_upload(
        message=message,
        manager=manager,
        dialog_key='card_files',
        next_state=Request.input_card_file,
    )


async def on_card_file_done(message, message_input, manager):
    await manager.switch_to(Request.input_info)


async def on_input_info(callback, widget, manager: DialogManager, request_text):
    context = manager.current_context()
    context.dialog_data.update(request_text=request_text)
    await delete_callback_message(callback)
    await manager.switch_to(Request.select_priority_gpa)


async def on_select_priority(callback, widget, manager: DialogManager, priority: str):
    context = manager.current_context()
    context.dialog_data['priority'] = priority
    await manager.switch_to(Request.select_priority_criteria)


async def on_select_priority_criteria(callback, widget, manager: DialogManager, criteria: str):
    context = manager.current_context()
    context.dialog_data['priority_criteria'] = criteria
    await manager.switch_to(Request.input_priority_file)


async def on_priority_file(message, message_input, manager):
    await handle_file_upload(
        message=message,
        manager=manager,
        dialog_key='priority_files',
        next_state=Request.input_priority_file,
    )


async def on_priority_file_done(message, message_input, manager):
    await manager.switch_to(Request.request_confirm)


async def on_confirm(callback, widget, manager: DialogManager):
    context = manager.current_context()
    request_datetime = dt.datetime.strptime(f"{context.dialog_data['req_date']} {context.dialog_data['req_time']}", "%d.%m.%Y %H:%M")
    gpa_instance = gpa.find_one({'ks': context.dialog_data['station'], 'num_shop': context.dialog_data['shop'], 'num_gpa': context.dialog_data['gpa']})
    path_type = get_path_type(gpa_instance)
    path_instance = paths.find_one({'path_type': path_type})
    current_stage = 1
    req_type = context.dialog_data['req_type']
    resource_act_reason = context.dialog_data.get('out_of_resource_reason_text')
    files = {}
    if context.dialog_data.get('protocol') == 'protocol_yes':
        files['protocol'] = context.dialog_data['protocol_files']
    if context.dialog_data.get('resource_act') == 'resource_act_yes':
        files['act'] = context.dialog_data['resource_act_files']
    if context.dialog_data.get('card') == 'card_yes':
        files['card'] = context.dialog_data['card_files']
    if context.dialog_data.get('epb') == 'epb_yes':
        files['epb'] = context.dialog_data['epb_files']
    if context.dialog_data.get('logbook') == 'logbook_yes':
        files['logbook'] = context.dialog_data['logbook_files']
    files['priority'] = context.dialog_data['priority_files']
    req_num = get_next_sequence_value('request_id')
    req_id = reqs.insert_one({
        'req_num': req_num,
        'req_type': req_type,
        'author_id': manager.event.from_user.id,
        'ks': context.dialog_data['station'],
        'num_gpa': context.dialog_data['gpa'],
        'gpa_id': gpa_instance['_id'],
        'datetime': dt.datetime.now(),
        'text': context.dialog_data['request_text'],
        'path_id': path_instance['_id'],
        'status': 'inwork',
        'current_stage': current_stage,
        'request_datetime': request_datetime,
        'notification_datetime': request_datetime + dt.timedelta(hours=3),
        'is_complete': False,
        'resource': '–í—ã—Ä–∞–±–æ—Ç–∞–Ω' if context.dialog_data['resource'] == 'resource_yes' else '–ù–µ –≤—ã—Ä–∞–±–æ—Ç–∞–Ω',
        'resource_act': '‚úÖ' if context.dialog_data['resource_act'] == 'resource_act_yes' else '‚ùå',
        'resource_act_reason': resource_act_reason,
        'protocol': '‚úÖ' if context.dialog_data['protocol'] == 'protocol_yes' else '‚ùå',
        'card': '‚úÖ' if context.dialog_data['card'] == 'card_yes' else '‚ùå',
        'epb': '‚úÖ' if context.dialog_data['epb'] == 'epb_yes' else '‚ùå',
        'priority': context.dialog_data['priority'],
        'priority_criteria': context.dialog_data['priority_criteria'],
        'is_fail': False,
        'fail_reason': '',
        'reject_reason': '',
        'files': files,
        'stages': {
            '1': {
                'status': 'pending',
                'datetime': dt.datetime.now(),
                'major_id': path_instance['stages']['1'],
            },
        }
    }).inserted_id
    await manager.switch_to(Request.request_finish)
    if req_type == 'with_approval':
        await send_request_to_major(req_id, current_stage)
    else:
        reqs.update_one(
            {'_id': req_id},
            {'$set': {'status': 'approved'}}
        )
        await send_information_to_major(req_id)


async def on_selected_inwork_request(callback, widget, manager: DialogManager, req_id):
    context = manager.current_context()
    context.dialog_data.update(req_id=req_id)
    await manager.switch_to(Request.show_inwork_single_request)


async def on_select_sorting(callback, widget, manager: DialogManager):
    category = widget.widget_id
    if category == 'sort_date':
        await manager.switch_to(Request.date_sort_requests)
    elif category == 'sort_status':
        await manager.switch_to(Request.status_sort_requests)
    elif category == 'sort_ks':
        await manager.switch_to(Request.ks_sort_requests)
    elif category == 'sort_type':
        await manager.switch_to(Request.type_sort_requests)


async def on_status_done(callback, widget, manager: DialogManager, status):
    context = manager.current_context()
    context.dialog_data.update(status=status, sorting_order='status')
    await manager.switch_to(Request.show_list_requests)


async def on_type_done(callback, widget, manager: DialogManager, gpa_type):
    context = manager.current_context()
    context.dialog_data.update(gpa_type=gpa_type, sorting_order='type')
    await manager.switch_to(Request.show_list_requests)


async def on_ks_done(callback, widget, manager: DialogManager, ks):
    context = manager.current_context()
    context.dialog_data.update(ks=ks, sorting_order='ks')
    await manager.switch_to(Request.show_list_requests)


async def on_date_done(callback, widget, manager: DialogManager, clicked_date):
    context = manager.current_context()
    context.dialog_data.update(date=clicked_date.strftime('%d.%m.%Y'), sorting_order='date')
    await manager.switch_to(Request.show_list_requests)


async def on_selected_request(callback, widget, manager: DialogManager, req_id):
    context = manager.current_context()
    context.dialog_data.update(req_id=req_id)
    await manager.switch_to(Request.show_single_request)


async def on_delete_req(callback, widget, manager: DialogManager):
    await manager.switch_to(Request.confirm_delete_request)


async def on_delete_req_confirm(callback, widget, manager: DialogManager):
    context = manager.current_context()
    req_id = context.dialog_data['req_id']
    reqs.delete_one({'_id': ObjectId(req_id)})
    await manager.switch_to(Request.show_list_requests)


def get_path_type(gpa_instance):
    type_gpa = gpa_instance['type_gpa']
    group_gpa = gpa_instance['group_gpa']
    if type_gpa == '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ' and group_gpa == '–ì–¢–ö-10-4':
        return '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ì–ü–ê (–ì–¢–ö-10-4)'
    elif type_gpa == '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ':
        return '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ì–ü–ê'
    elif type_gpa == '–ê–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–≤–æ–¥':
        return '–ì–ü–ê —Å –∞–≤–∏–∞. –ø—Ä–∏–≤–æ–¥–æ–º'
    elif type_gpa == '–°—É–¥–æ–≤–æ–π –ø—Ä–∏–≤–æ–¥':
        return '–ì–ü–ê —Å —Å—É–¥–æ–≤—ã–º –ø—Ä–∏–≤–æ–¥–æ–º'


async def send_information_to_major(req_id):
    tz = timezone(const.TIME_ZONE)
    req = reqs.find_one({'_id': req_id})
    path_instance = paths.find_one({'_id': req['path_id']})
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    author_name = (await bot.get_chat(req['author_id'])).full_name
    stages = path_instance['stages']
    info_text = (
        f'üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {req.get("req_num", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n'
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {req['datetime'].astimezone(tz).strftime('%d.%m.%Y %H:%M')}\n"
        f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {req['ks']}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n\n"
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–ü–ê:</b>\n"
        f"–°—Ç.‚Ññ –ì–ü–ê: {gpa_instance['num_gpa']}\n"
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–ü–ê: {gpa_instance['name_gpa']}\n"
        f"–¢–∏–ø –ì–ü–ê: {gpa_instance['type_gpa']}\n"
        f"–¢–∏–ø –Ω–∞–≥–Ω–µ—Ç–∞—Ç–µ–ª—è: {gpa_instance['cbn_type']}\n"
        f'–ú–†–†: {req.get("resource", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n'
        f'–ê–∫—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ú–†–†: {req.get("resource_act", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}'
    )
    if req.get('resource_act_reason'):
        info_text += f"\n<blockquote>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∞ –ú–†–†: {req['resource_act_reason']}</blockquote>"
    info_text += (
        f'\n–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –≠–ü–ë: {req.get("epb", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n'
        f'–ö–∞—Ä—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ì–ü–ê –∫ –ø—É—Å–∫—É: {req.get("card", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n'
        f'–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–¥–∞—á–∏ –∑–∞—â–∏—Ç: {req.get("protocol", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n\n'
        f'<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø—É—Å–∫–∞ (–∫—Ä–∏—Ç–µ—Ä–∏–π):</b> {req.get("priority", "–Ω/–¥")} ({req.get("priority_criteria", "–Ω/–¥")})\n\n'
        f"<b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏\n\n"
        f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>\n<blockquote>{req['text']}</blockquote>\n\n"
        '–î–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è'
    )
    kb = InlineKeyboardBuilder()
    files = req.get('files', {})
    for key, label in FILE_LABELS.items():
        if key in files and isinstance(files[key], list) and len(files[key]) > 0:
            kb.button(text=label, callback_data=f'req_files_{key}_{req_id}')
    kb.adjust(1)
    for major_id in stages.values():
        try:
            await bot.send_message(chat_id=major_id, text=info_text, reply_markup=kb.as_markup())
        except Exception as e:
            await report_error(e)
    await send_morning_report(update=True)


async def send_request_to_major(req_id, current_stage):
    req = reqs.find_one({'_id': req_id})
    path_instance = paths.find_one({'_id': req['path_id']})
    gpa_instance = gpa.find_one({'_id': req['gpa_id']})
    author_name = (await bot.get_chat(req['author_id'])).full_name
    while current_stage <= path_instance['num_stages']:
        major_stage_id = path_instance['stages'][str(current_stage)]
        stages_text = await build_stages_text(req_id, path_instance, current_stage)
        request_text = await build_req_text(req, gpa_instance, stages_text, author_name, new_req=True)
        kb = InlineKeyboardBuilder()
        files = req.get('files', {})
        file_buttons_count = 0

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª, —Å—á–∏—Ç–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        for key, label in FILE_LABELS.items():
            if key in files and isinstance(files[key], list) and len(files[key]) > 0:
                kb.button(text=label, callback_data=f'req_files_{key}_{req_id}')
                file_buttons_count += 1
        kb.button(text='üî¥ –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'req_reject_{req_id}_{current_stage}')
        kb.button(text='üü¢ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å', callback_data=f'req_apply_{req_id}_{current_stage}')
        kb.adjust(*([1] * file_buttons_count), 2)
        try:
            await bot.send_message(major_stage_id, text=request_text, reply_markup=kb.as_markup())
            reqs.update_one({'_id': req_id}, {'$set': {
                f'stages.{current_stage}': {
                    'datetime': dt.datetime.now(),
                    'major_id': major_stage_id,
                    'status': 'inwork'
                },
                'current_stage': current_stage
            }})
            break
        except (TelegramForbiddenError, TelegramBadRequest):
            reqs.update_one({'_id': req_id}, {'$set': {
                f'stages.{current_stage}.status': 'pass',
                f'stages.{current_stage}.datetime': dt.datetime.now(),
                f'stages.{current_stage}.major_id': major_stage_id
            }})
            current_stage += 1
            req = reqs.find_one({'_id': req_id})
        except Exception:
            break
    else:
        # await send_notify(req_id, gpa_instance, path_instance, is_fallback=True, is_group=True)
        pass


async def build_req_text(req, gpa_instance, stages_text, author_name, new_req=False):
    tz = timezone(const.TIME_ZONE)
    request_text = (
        f'üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {req.get("req_num", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n'
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {req['datetime'].astimezone(tz).strftime('%d.%m.%Y %H:%M')}\n"
        f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {req['ks']}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n\n"
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–ü–ê:</b>\n"
        f"–°—Ç.‚Ññ –ì–ü–ê: {gpa_instance['num_gpa']}\n"
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–ü–ê: {gpa_instance['name_gpa']}\n"
        f"–¢–∏–ø –ì–ü–ê: {gpa_instance['type_gpa']}\n"
        f"–¢–∏–ø –Ω–∞–≥–Ω–µ—Ç–∞—Ç–µ–ª—è: {gpa_instance['cbn_type']}\n"
        f'–ú–†–†: {req.get("resource", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n'
        f'–ê–∫—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ú–†–†: {req.get("resource_act", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}'
    )
    if req.get('resource_act_reason'):
        request_text += f"\n<blockquote>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∞ –ú–†–†: {req['resource_act_reason']}</blockquote>"
    request_text += (
        f'\n–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –≠–ü–ë: {req.get("epb", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n'
        f'–ö–∞—Ä—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ì–ü–ê –∫ –ø—É—Å–∫—É: {req.get("card", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n'
        f'–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–¥–∞—á–∏ –∑–∞—â–∏—Ç: {req.get("protocol", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")}\n\n'
        f'<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø—É—Å–∫–∞ (–∫—Ä–∏—Ç–µ—Ä–∏–π):</b> {req.get("priority", "–Ω/–¥")} ({req.get("priority_criteria", "–Ω/–¥")})\n\n'
        f"<b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b>\n{req['request_datetime'].strftime('%d.%m.%Y %H:%M')}\n\n"
        f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>\n<blockquote>{req['text']}</blockquote>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b>\n{stages_text}\n"
    )
    request_text = f'<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É—Å–∫ –ì–ü–ê</b>\n{request_text}' if new_req else f'<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É—Å–∫ –ì–ü–ê</b>\n{request_text}'
    request_text = f'{request_text}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:' if new_req else request_text
    if req['status'] == 'rejected':
        request_text = f'{request_text}<b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:</b>\n<blockquote>{req.get("reject_reason", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")}</blockquote>'
    return request_text


async def build_stages_text(req_id, path_instance, current_stage):
    result = ''
    req = reqs.find_one({'_id': req_id})
    if req['req_type'] == 'without_approval':
        return '–±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è'
    for stage_num in range(1, path_instance['num_stages'] + 1):
        stage_data = req['stages'].get(str(stage_num), {})
        status = stage_data.get('status', 'inwork' if stage_num == current_stage else 'pending')
        icon = {'apply': 'üü¢', 'reject': 'üî¥', 'pass': '‚ö´'}.get(status, '‚ö™')
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        if stage_num == current_stage and status not in ('inwork', 'pending'):
            # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            try:
                major_name = (await bot.get_chat(stage_data['major_id'])).full_name if 'major_id' in stage_data else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            except:
                major_name = '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        elif stage_num == current_stage:
            # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –≤ —Ä–∞–±–æ—Ç–µ/–æ–∂–∏–¥–∞–Ω–∏–∏
            major_name = '—Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø'
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
            try:
                major_name = (await bot.get_chat(stage_data['major_id'])).full_name if 'major_id' in stage_data else '–æ–∂–∏–¥–∞–µ—Ç—Å—è'
            except:
                major_name = '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        tz = timezone(const.TIME_ZONE)
        date_str = stage_data.get('datetime', '').astimezone(tz).strftime('%d.%m.%Y %H:%M') if 'datetime' in stage_data else ""
        result += f"{icon} –≠—Ç–∞–ø {stage_num} - {major_name}" + (f" ({date_str})" if date_str else "") + "\n"
    return result


async def send_notify(req_id, gpa_instance, path, is_fallback=False, is_group=True, reason='', is_rejected=False):
    tz = timezone(const.TIME_ZONE)
    req = reqs.find_one({'_id': req_id})
    if not req:
        return
    author_name = (await bot.get_chat(req['author_id'])).full_name
    gpa_info = (
        f'<b>–°—Ç.‚Ññ –ì–ü–ê:</b> {gpa_instance["num_gpa"]}\n'
        f'<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ì–ü–ê:</b> {gpa_instance["name_gpa"]}\n'
        f'<b>–¢–∏–ø –ì–ü–ê:</b> {gpa_instance["type_gpa"]}\n'
        f'<b>–¢–∏–ø –Ω–∞–≥–Ω–µ—Ç–∞—Ç–µ–ª—è:</b> {gpa_instance["cbn_type"]}'
    )
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å–∞
    if is_group:
        if is_fallback:
            header = '‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—É—Å–∫–∞ –ì–ü–ê, –Ω–æ –∞–¥—Ä–µ—Å–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã\n\n'
        else:
            header = '‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É—Å–∫ –ì–ü–ê —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω\n\n'
    else:
        if is_rejected:
            header = f'üî¥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n<blockquote>{reason}</blockquote>\n\n'
        else:
            header = 'üü¢ –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω!\n\n'
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–¥–∏—è—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
    stages_text = ''
    if not is_fallback and not is_rejected:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
        for stage_num in range(1, path['num_stages'] + 1):
            stage_data = req['stages'].get(str(stage_num), {})
            status = stage_data.get('status', 'pending')
            icon = ('üü¢' if status == 'apply' else
                   'üî¥' if status == 'reject' else
                   '‚ö´' if status == 'pass' else '‚ö™')
            major_name = '–æ–∂–∏–¥–∞–µ—Ç—Å—è'
            if 'major_id' in stage_data:
                try:
                    major_chat = await bot.get_chat(stage_data['major_id'])
                    major_name = major_chat.full_name
                except:
                    major_name = '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            date_str = stage_data.get('datetime', '').astimezone(tz).strftime('%d.%m.%Y %H:%M') if 'datetime' in stage_data else ""
            stages_text += f"{icon} –≠—Ç–∞–ø {stage_num} - {major_name}" + (f" ({date_str})" if date_str else "") + "\n"
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    request_text = (
        f"{header}"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {req['datetime'].astimezone(tz).strftime('%d.%m.%Y %H:%M')}\n"
        f"üè≠ –°—Ç–∞–Ω—Ü–∏—è: {req['ks']}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n\n"
        f"<u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–ü–ê:</u>\n{gpa_info}\n\n"
        f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:</b>\n<blockquote>{req['text']}</blockquote>\n"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–¥–∏—è—Ö –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
    if not is_fallback and not is_rejected and stages_text:
        request_text += f"\n<b>–≠—Ç–∞–ø—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:</b>\n{stages_text}\n"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if is_group:
            await bot.send_message(
                chat_id=EXPLOIT_GROUP_ID,
                # message_thread_id=REQUEST_THREAD_ID,
                text=request_text
            )
        else:
            message_effect = '5104858069142078462' if is_fallback else '5046509860389126442'
            await bot.send_message(
                chat_id=req['author_id'],
                message_effect_id=message_effect,
                text=request_text
            )
    except Exception as e:
        await report_error(e)


async def delete_callback_message(callback):
    try:
        await callback.delete()
    except Exception as e:
        await report_error(e)
    try:
        await callback.bot.delete_message(
            chat_id=callback.from_user.id,
            message_id=callback.message_id - 1
        )
    except Exception as e:
        await report_error(e)


async def send_req_files(callback, widget, manager: DialogManager):
    file_key = widget.widget_id
    context = manager.current_context()
    req_id = context.dialog_data['req_id']
    await show_req_files(callback, file_key, req_id)


async def show_req_files(call, file_key: str, req_id: str):
    try:
        req_id = ObjectId(req_id)
        req = reqs.find_one({'_id': req_id})
        if not req or 'files' not in req or file_key not in req['files']:
            await call.answer("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        file_list = req['files'][file_key]
        if not isinstance(file_list, list) or not file_list:
            await call.answer("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
            return
        sent_messages = []
        for file_info in file_list:
            file_id = file_info.get('file_id')
            file_type = file_info.get('file_type')
            if not file_id or not file_type:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            try:
                if file_type == 'photo':
                    msg = await call.message.answer_photo(photo=file_id)
                elif file_type == 'file':
                    msg = await call.message.answer_document(document=file_id)
                else:
                    continue  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                sent_messages.append(msg.message_id)
            except Exception as e:
                await report_error(e)
        if not sent_messages:
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", show_alert=True)
            return
        buffer_msgs_id = buffer.insert_one({'sent_messages': sent_messages}).inserted_id
        kb = InlineKeyboardBuilder()
        kb.button(
            text="‚ùå –°–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã",
            callback_data=f"hide_files_{buffer_msgs_id}"
        )
        await call.message.answer("–î–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=kb.as_markup())
        await call.answer()
    except Exception as e:
        await report_error(e)


async def handle_file_upload(message, manager: DialogManager, dialog_key, next_state):
    manager.show_mode = ShowMode.DELETE_AND_SEND
    file_id = None
    file_type = None
    if message.document:
        file_id = message.document.file_id
        file_type = 'file'
        await message.answer('üìé –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω')
    elif message.photo:
        photo: PhotoSize = message.photo[-1]
        file_id = photo.file_id
        file_type = 'photo'
        await message.answer('üì∑ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
    else:
        await message.answer('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ')
        return
    files = manager.dialog_data.setdefault(dialog_key, [])
    files.append({'file_id': file_id, 'file_type': file_type})
    manager.dialog_data[dialog_key] = files
    await manager.switch_to(next_state)
