from aiogram.types import ContentType
from aiogram_dialog import Window
from aiogram_dialog.widgets.input import MessageInput, TextInput
from aiogram_dialog.widgets.kbd import (Back, Button, CurrentPage, NextPage,
                                        PrevPage, Row)
from aiogram_dialog.widgets.text import Const, Format, Multi

import utils.constants as texts
from dialogs.custom_widgets.custom_calendar import CustomCalendar
from dialogs.for_request.states import Request

from . import getters, keyboards, selected


ID_SCROLL_PAGER = 'stations_pager'
MAJOR_SCROLL_PAGER = 'majors_pager'
REQUEST_SCROLL_PAGER = 'requests_pager'
KS_SCROLL_PAGER = 'ks_pager'
MAIN_MENU = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø—É—Å–∫ –ì–ü–ê.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:'
STATIONS_TEXT = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é'
SHOPS_TEXT = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–≥–æ —Ü–µ—Ö–∞'
GPA_TEXT = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ì–ü–ê'
INPUT_TEXT = '–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–π –∑–∞—è–≤–∫–µ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û§'
FINISH_TEXT = '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ. –í–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.'
FINISH_TEXT_INFO = '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ü–û–≠–ö–°'
PATHS_EMPTY = '–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:'
PATH_TUNE = '–í—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:'
DATE_TEXT = 'üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É—Å–∫–∞ –ì–ü–ê'
TIME_TEXT = 'üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É—Å–∫–∞ –ì–ü–ê'
EPB_TEXT = 'üìë –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ì–ü–ê –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —ç–∫–ø–µ—Ä—Ç–∏–∑—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–≠–ü–ë)?'
RESOURCE_TEXT = 'üõ†Ô∏è –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ì–ü–ê –≤—ã—Ä–∞–±–æ—Ç–∞–Ω –º–µ–∂—Ä–µ–º–æ–Ω—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å (–ú–†–†)?'
RESOURCE_ACT_TEXT = 'üìù –ò–º–µ–µ—Ç—Å—è –ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –ü–û–≠–ö–° –ê–∫—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ú–†–†?'
RESOURCE_ACT_FILE_TEXT = (
    'üíæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∞–Ω-–∫–æ–ø–∏—é <b>—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–≥–æ</b> <u>–ê–∫—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ú–†–†</u> –∏–ª–∏ <u>–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ '
    '—Ñ–æ—Ä–º—É–ª—è—Ä–∞</u>, –≥–¥–µ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –ö–† –∏ –°–†. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û§\n\n'
    '<i>üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É</i>'
)
OUT_RESOURCE_REASON_TEXT = (
    '–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –ì–ü–ê –±–µ–∑ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ú–†–† –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è. –ï—Å–ª–∏ –í–∞–º <u>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ</u> '
    '–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ì–ü–ê –≤–≤–µ–¥–∏—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û§'
)
PROTOCOL_TEXT = 'üõ°Ô∏è –ò–º–µ–µ—Ç—Å—è –ª–∏ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–¥–∞—á–∏ –∑–∞—â–∏—Ç –ø–µ—Ä–µ–¥ –ø—É—Å–∫–æ–º?'
PROTOCOL_FILE_TEXT = (
    'üíæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∞–Ω-–∫–æ–ø–∏—é <u>–ü—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–¥–∞—á–∏ –∑–∞—â–∏—Ç</u> –≤—ã–±—Ä–∞–≤ —Ñ–∞–π–ª –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ‚û§\n\n'
    '<i>üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É</i>'
)
CARD_TEXT = 'üìë –ò–º–µ–µ—Ç—Å—è –ª–∏ –ö–∞—Ä—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ì–ü–ê –∫ –ø—É—Å–∫—É?'
CARD_FILE_TEXT = (
    'üíæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∞–Ω-–∫–æ–ø–∏—é <u>–ö–∞—Ä—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ì–ü–ê –∫ –ø—É—Å–∫—É</u> –≤—ã–±—Ä–∞–≤ —Ñ–∞–π–ª –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ‚û§\n\n'
    '<i>üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É</i>'
)
EPB_FILE_TEXT = (
    'üíæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∞–Ω-–∫–æ–ø–∏—é <u>–ó–∞–∫–ª—é—á–µ–Ω–∏—è –≠–ü–ë</u> –≤—ã–±—Ä–∞–≤ —Ñ–∞–π–ª –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É ‚û§\n\n'
    '<i>üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É</i>'
)
LOGBOOK_FILE_TEXT = (
    'üíæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∞–Ω-–∫–æ–ø–∏—é <u>–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º—É–ª—è—Ä–∞</u>, '
    '–≥–¥–µ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –ö–† –∏ –°–†. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û§\n\n'
    '<i>üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É</i>'
)
REJECT_TEXT = '‚ùó –ó–∞—è–≤–∫–∞ –ø—Ä–∏ —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞'
TYPE_REQUEST_TEXT = (
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:\n\n'
    '<b>¬´‚úÖ –° —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ–º –ü–û–≠–ö–°¬ª</b> ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.\n'
    '<b>¬´‚ö° –ë–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ü–û–≠–ö–°¬ª</b> ‚Äì —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ '
    '(–∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –Ω–æ—á–Ω—ã–µ –ø—É—Å–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –î–° –∏ —Ç.–ø.). '
    '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ü–û–≠–ö–° –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ.\n\n'
    '‚ö†Ô∏è –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç <b>—Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ–º</b> ‚Äì '
    '—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π –∏ –∑–∞–¥–µ—Ä–∂–µ–∫.'
)
PRIORITY_GPA_TEXT = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ–º–æ–≥–æ –ì–ü–ê'
PRIORITY_CRITERIA_TEXT = '–£–∫–∞–∂–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º–æ–≥–æ –ì–ü–ê'
PRIORITY_FILE_TEXT = (
    'üíæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∞–Ω-–∫–æ–ø–∏—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö —Å –ü–û–≠–ö–° –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞ –ì–ü–ê.\n'
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚û§\n\n'
    '<i>üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É</i>'
)


async def exit_click(callback, button, dialog_manager):
    try:
        await dialog_manager.done()
        await callback.message.delete()
    except:
        pass


async def return_main_menu(callback, button, dialog_manager):
    await dialog_manager.switch_to(Request.select_category)


async def return_sorting_menu(callback, button, dialog_manager):
    await dialog_manager.switch_to(Request.select_sorting_requests)


def select_category_window():
    return Window(
        Const(MAIN_MENU),
        keyboards.category_buttons(),
        Button(Const(texts.EXIT_BUTTON), on_click=exit_click, id='exit'),
        state=Request.select_category,
        getter=getters.get_users_info
    )


def select_type_request_window():
    return Window(
        Const(TYPE_REQUEST_TEXT),
        keyboards.type_request_buttons(),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_type_request,
        getter=getters.get_users_info
    )


def stations_window():
    return Window(
        Const(STATIONS_TEXT),
        keyboards.paginated_stations(ID_SCROLL_PAGER, selected.on_station_done),
        Row(
            PrevPage(scroll=ID_SCROLL_PAGER, text=Format('<')),
            CurrentPage(scroll=ID_SCROLL_PAGER, text=Format('{current_page1} / {pages}')),
            NextPage(scroll=ID_SCROLL_PAGER, text=Format('>')),
        ),
        Button(Const(texts.BACK_BUTTON), on_click=return_main_menu, id='main_menu'),
        state=Request.select_station,
        getter=getters.get_stations,
    )


def shops_window():
    return Window(
        Const(SHOPS_TEXT),
        keyboards.shops_btns(selected.on_shop_done),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_shop,
        getter=getters.get_shops,
    )


def gpa_window():
    return Window(
        Const(GPA_TEXT),
        keyboards.gpa_btns(selected.on_gpa_done),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_gpa,
        getter=getters.get_gpa,
    )


def select_epb_window():
    return Window(
        Const(EPB_TEXT),
        Row(
            Button(
                Const('‚úîÔ∏è –î–∞'),
                'epb_yes',
                on_click=selected.on_epb,
            ),
            Button(
                Const('‚ùå –ù–µ—Ç'),
                'epb_no',
                on_click=selected.on_epb,
            ),
            id='epb_btns'
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_epb,
    )


def input_epb_file_window():
    return Window(
        Const(EPB_FILE_TEXT),
        Format(
            '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤/—Ñ–æ—Ç–æ: <b>{count_files}</b>',
            when='has_files'
        ),
        MessageInput(
            selected.on_epb_file,
            content_types=[ContentType.DOCUMENT, ContentType.PHOTO]
        ),
        Button(
            Const('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
            'files_stop',
            on_click=selected.on_epb_file_done,
            when='has_files'
        ),
        state=Request.input_epb_file,
        getter=getters.get_epb_files
    )


def date_window():
    return Window(
        Const(DATE_TEXT),
        CustomCalendar(
            id='calendar',
            on_click=selected.on_select_date,
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_date,
    )


def time_window():
    return Window(
        Const(TIME_TEXT),
        keyboards.time_btns(selected.on_select_time),
        keyboards.time_btns_ext(selected.on_select_time),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_time,
        getter=getters.get_type_request
    )


def select_resource_window():
    return Window(
        Const(RESOURCE_TEXT),
        Row(
            Button(
                Const('‚úîÔ∏è –î–∞'),
                'resource_yes',
                on_click=selected.on_resource,
            ),
            Button(
                Const('‚ùå –ù–µ—Ç'),
                'resource_no',
                on_click=selected.on_resource,
            ),
            id='resource_btns'
        ),
        Button(
            Const(texts.BACK_BUTTON),
            on_click=selected.return_from_resource,
            id='type_req'
        ),
        state=Request.select_resource,
    )


def input_logbook_file_window():
    return Window(
        Const(LOGBOOK_FILE_TEXT),
        Format(
            '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤/—Ñ–æ—Ç–æ: <b>{count_files}</b>',
            when='has_files'
        ),
        MessageInput(
            selected.on_logbook_file,
            content_types=[ContentType.DOCUMENT, ContentType.PHOTO]
        ),
        Button(
            Const('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
            'files_stop',
            on_click=selected.on_logbook_file_done,
            when='has_files'
        ),
        state=Request.input_logbook_file,
        getter=getters.get_logbook_files
    )


def select_resource_act_window():
    return Window(
        Const(RESOURCE_ACT_TEXT),
        Row(
            Button(
                Const('‚úîÔ∏è –î–∞'),
                'resource_act_yes',
                on_click=selected.on_resource_act,
            ),
            Button(
                Const('‚ùå –ù–µ—Ç'),
                'resource_act_no',
                on_click=selected.on_resource_act,
            ),
            id='resource_act_btns'
        ),
        # Back(Const(texts.BACK_BUTTON)),
        state=Request.select_resource_act,
    )


def input_resource_act_file_window():
    return Window(
        Const(RESOURCE_ACT_FILE_TEXT),
        Format(
            '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤/—Ñ–æ—Ç–æ: <b>{count_files}</b>',
            when='has_files'
        ),
        MessageInput(
            selected.on_resource_act_file,
            content_types=[ContentType.DOCUMENT, ContentType.PHOTO]
        ),
        Button(
            Const('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
            'files_stop',
            on_click=selected.on_resource_act_file_done,
            when='has_files'
        ),
        state=Request.input_resource_act_file,
        getter=getters.get_resource_files
    )


def input_out_of_resource_reason_window():
    return Window(
        Const(OUT_RESOURCE_REASON_TEXT),
        Button(
            Const(texts.BACK_BUTTON),
            on_click=selected.return_to_resource_act,
            id='return_to_resource_act'
        ),
        TextInput(
            id='out_of_resource_reason',
            on_success=selected.on_input_resource_reason,
        ),
        state=Request.input_out_of_resource_reason,
    )


def select_protocol_window():
    return Window(
        Const(PROTOCOL_TEXT),
        Row(
            Button(
                Const('‚úîÔ∏è –î–∞'),
                'protocol_yes',
                on_click=selected.on_protocol,
            ),
            Button(
                Const('‚ùå –ù–µ—Ç'),
                'protocol_no',
                on_click=selected.on_protocol,
            ),
            id='protocol_btns'
        ),
        Button(
            Const(texts.BACK_BUTTON),
            on_click=selected.return_to_previous_state,
            id='return_to_resource_act'
        ),
        state=Request.select_protocol,
    )


def input_protocol_file_window():
    return Window(
        Const(PROTOCOL_FILE_TEXT),
        Format(
            '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤/—Ñ–æ—Ç–æ: <b>{count_files}</b>',
            when='has_files'
        ),
        MessageInput(
            selected.on_protocol_act_file,
            content_types=[ContentType.DOCUMENT, ContentType.PHOTO]
        ),
        Button(
            Const('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
            'files_stop',
            on_click=selected.on_protocol_act_file_done,
            when='has_files'
        ),
        state=Request.input_protocol_file,
        getter=getters.get_protocol_files
    )


def select_card_window():
    return Window(
        Const(CARD_TEXT),
        Row(
            Button(Const('‚úîÔ∏è –î–∞'), 'card_yes', on_click=selected.on_card),
            Button(Const('‚ùå –ù–µ—Ç'), 'card_no', on_click=selected.on_card),
            id='protocol_btns'
        ),
        # Button(Const(texts.BACK_BUTTON), on_click=selected.return_to, id='return_to'),
        state=Request.select_card,
    )


def input_card_file_window():
    return Window(
        Const(CARD_FILE_TEXT),
        Format(
            '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤/—Ñ–æ—Ç–æ: <b>{count_files}</b>',
            when='has_files'
        ),
        MessageInput(
            selected.on_card_file,
            content_types=[ContentType.DOCUMENT, ContentType.PHOTO]
        ),
        Button(
            Const('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
            'files_stop',
            on_click=selected.on_card_file_done,
            when='has_files'
        ),
        state=Request.input_card_file,
        getter=getters.get_card_files,

    )


def show_reject_window():
    return Window(
        Const(REJECT_TEXT),
        Button(Const(texts.EXIT_BUTTON), on_click=return_main_menu, id='main_menu'),
        state=Request.show_reject_info,
    )


def input_info_window():
    return Window(
        Const(INPUT_TEXT),
        # Button(Const(texts.BACK_BUTTON), on_click=return_main_menu, id='main_menu'),
        TextInput(
            id='request_info',
            on_success=selected.on_input_info,
        ),
        state=Request.input_info,
    )


def select_priority_gpa_window():
    return Window(
        Const(PRIORITY_GPA_TEXT),
        keyboards.priority_btns(selected.on_select_priority),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_priority_gpa
    )


def select_priority_criteria_window():
    return Window(
        Const(PRIORITY_CRITERIA_TEXT),
        keyboards.priority_criteria_btns(selected.on_select_priority_criteria),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_priority_criteria
    )


def input_priority_file_window():
    return Window(
        Const(PRIORITY_FILE_TEXT),
        Format(
            '\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤/—Ñ–æ—Ç–æ: <b>{count_files}</b>',
            when='has_files'
        ),
        MessageInput(
            selected.on_priority_file,
            content_types=[ContentType.DOCUMENT, ContentType.PHOTO]
        ),
        Button(
            Const('–ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'),
            'files_stop',
            on_click=selected.on_priority_file_done,
            when='has_files'
        ),
        state=Request.input_priority_file,
        getter=getters.get_priority_files,

    )


def request_confirm_window():
    return Window(
        Format('<u>–í—ã –≤—ã–±—Ä–∞–ª–∏:</u>\n{station}\n–ì–ü–ê —Å—Ç.‚Ññ {gpa_num}\n'),
        Format(
            '<u>–°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞ –ì–ü–ê:</u>\n{req_date} - {req_time}\n',
            when='with_approval'
        ),
        Format('<u>–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:</u>\n<i>{request_text}</i>'),
        Const('\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ?', when='with_approval'),
        Const('\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Å–∫–µ –ì–ü–ê?', when='without_approval'),
        Row(
            Back(Const(texts.BACK_BUTTON)),
            Button(
                Const('‚úîÔ∏è –î–∞'),
                'confirm',
                on_click=selected.on_confirm,
            ),
            id='ao_confirm_btns'
        ),
        state=Request.request_confirm,
        getter=getters.get_request_info,
    )


def finish_window():
    return Window(
        Const(FINISH_TEXT, when='with_approval'),
        Const(FINISH_TEXT_INFO, when='without_approval'),
        Button(Const(texts.EXIT_BUTTON), on_click=exit_click, id='exit_complete'),
        state=Request.request_finish,
        getter=getters.get_type_request
    )


def inwork_requests_window():
    return Window(
        Const('–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏', when='not_empty'),
        Const('–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', when='is_empty'),
        keyboards.paginated_requests(REQUEST_SCROLL_PAGER, selected.on_selected_inwork_request),
        Row(
            PrevPage(scroll=REQUEST_SCROLL_PAGER, text=Format('<')),
            CurrentPage(scroll=REQUEST_SCROLL_PAGER, text=Format('{current_page1} / {pages}')),
            NextPage(scroll=REQUEST_SCROLL_PAGER, text=Format('>')),
            when='not_empty'
        ),
        Button(Const(texts.BACK_BUTTON), on_click=return_main_menu, id='main_menu'),
        state=Request.inwork_requests,
        getter=getters.get_inwork_requests,
    )


def show_inwork_single_request_window():
    return Window(
        Format('{text}'),
        keyboards.files_btns(),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.show_inwork_single_request,
        getter=getters.get_single_request,
    )


def select_sorting_requests_window():
    return Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞—è–≤–æ–∫:'),
        keyboards.sort_requests_buttons(),
        Button(Const(texts.BACK_BUTTON), on_click=return_main_menu, id='main_menu'),
        state=Request.select_sorting_requests,
    )


def status_sort_requests_window():
    return Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫:'),
        keyboards.statuses_buttons(selected.on_status_done),
        Button(Const(texts.BACK_BUTTON), on_click=return_sorting_menu, id='sorting_menu'),
        state=Request.status_sort_requests,
        getter=getters.get_statuses,
    )


def ks_sort_requests_window():
    return Window(
        Const(STATIONS_TEXT),
        keyboards.paginated_ks(KS_SCROLL_PAGER, selected.on_ks_done),
        Row(
            PrevPage(scroll=KS_SCROLL_PAGER, text=Format('<')),
            CurrentPage(scroll=KS_SCROLL_PAGER, text=Format('{current_page1} / {pages}')),
            NextPage(scroll=KS_SCROLL_PAGER, text=Format('>')),
        ),
        Button(Const(texts.BACK_BUTTON), on_click=return_sorting_menu, id='sorting_menu'),
        state=Request.ks_sort_requests,
        getter=getters.get_ks,
    )


def type_sort_requests_window():
    return Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø –ì–ü–ê:'),
        keyboards.gpa_types_buttons(selected.on_type_done),
        Button(Const(texts.BACK_BUTTON), on_click=return_sorting_menu, id='sorting_menu'),
        state=Request.type_sort_requests,
        getter=getters.get_gpa_types,
    )


def date_sort_requests_window():
    return Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª—Å—è –ø—É—Å–∫ –ì–ü–ê'),
        CustomCalendar(
            id='calendar',
            on_click=selected.on_date_done,
        ),
        Button(Const(texts.BACK_BUTTON), on_click=return_sorting_menu, id='sorting_menu'),
        state=Request.date_sort_requests,
    )


def show_list_requests_window():
    return Window(
        Format('–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "{status}"', when='is_status'),
        Format('–ó–∞—è–≤–∫–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "{type}"', when='is_type'),
        Format('–ó–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–º–ø—Ä–µ—Å—Å–æ–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ {ks}', when='is_ks'),
        Format('–ó–∞—è–≤–∫–∏ –Ω–∞ {date}', when='is_date'),
        Const('–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', when='is_empty'),
        keyboards.paginated_requests(REQUEST_SCROLL_PAGER, selected.on_selected_request),
        Row(
            PrevPage(scroll=REQUEST_SCROLL_PAGER, text=Format('<')),
            CurrentPage(scroll=REQUEST_SCROLL_PAGER, text=Format('{current_page1} / {pages}')),
            NextPage(scroll=REQUEST_SCROLL_PAGER, text=Format('>')),
        ),
        Button(
            Const(texts.BACK_BUTTON),
            on_click=selected.on_select_sorting,
            id='sort_status',
            when='is_status'
        ),
        Button(
            Const(texts.BACK_BUTTON),
            on_click=selected.on_select_sorting,
            id='sort_ks',
            when='is_ks'
        ),
        Button(
            Const(texts.BACK_BUTTON),
            on_click=selected.on_select_sorting,
            id='sort_date',
            when='is_date'
        ),
        Button(
            Const(texts.BACK_BUTTON),
            on_click=selected.on_select_sorting,
            id='sort_type',
            when='is_type'
        ),
        state=Request.show_list_requests,
        getter=getters.get_requests,
    )


def show_single_request_window():
    return Window(
        Format('{text}'),
        keyboards.files_btns(),
        Button(
            Const('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É'),
            on_click=selected.on_delete_req,
            id='delete_req',
        ),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.show_single_request,
        getter=getters.get_single_request,
    )


def confirm_delete_request_window():
    return Window(
        Format('‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?'),
        Row(
            Button(
                Const('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å'),
                id='delete_confirm_yes',
                on_click=selected.on_delete_req_confirm
            ),
            Back(Const('‚ùå –ù–µ—Ç')),
        ),
        state=Request.confirm_delete_request,
    )


def paths_info_window():
    return Window(
        Const(PATHS_EMPTY, when='paths_empty'),
        Const('<u>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫:</u>\n', when='paths_on'),
        Format('{paths_info}', when='paths_on'),
        keyboards.paths_type_buttons(),
        Button(Const(texts.BACK_BUTTON), on_click=return_main_menu, id='exit'),
        state=Request.paths_info,
        getter=getters.get_paths_info,
    )


def select_num_stage():
    return Window(
        Multi(Const(PATH_TUNE), Format('<u>{path_name}</u>'), sep=' '),
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è'),
        keyboards.num_stages_buttons(),
        Back(Const(texts.BACK_BUTTON)),
        state=Request.select_num_stages,
        getter=getters.get_path_name,
    )


def select_majors_window():
    return Window(
        Multi(Const(PATH_TUNE), Format('<u>{path_name}</u>'), sep=' '),
        Format('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤: <b>{num_stages}</b>\n'),
        Const('–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞:'),
        Format('{stages_info}'),
        keyboards.paginated_majors(MAJOR_SCROLL_PAGER),
        Row(
            PrevPage(scroll=MAJOR_SCROLL_PAGER, text=Format('<')),
            CurrentPage(scroll=MAJOR_SCROLL_PAGER, text=Format('{current_page1} / {pages}')),
            NextPage(scroll=MAJOR_SCROLL_PAGER, text=Format('>')),
        ),
        Button(
            Const(texts.NEXT_BUTTON),
            id='majors_done',
            on_click=selected.on_majors_done,
            when='complete'
        ),
        Button(
            Const(texts.BACK_BUTTON),
            on_click=selected.back_and_erase_widget_click,
            id='back_with_erase'
        ),
        state=Request.select_majors,
        getter=getters.get_majors_and_stages
    )


def confirm_path_window():
    return Window(
        Const('<u>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:</u>'),
        Format('<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {path_name}'),
        Format('<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤:</b> {num_stages}'),
        Format('{stages_info}'),
        Const('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?'),
        Row(
            Back(Const(texts.BACK_BUTTON)),
            Button(Const('‚úîÔ∏è –î–∞'), 'path_save', on_click=selected.path_save),
            id='choose_btns'
        ),
        state=Request.path_confirm,
        getter=getters.get_path_complete_info,
    )


def complete_path_window():
    return Window(
        Const('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'),
        Button(
            Const(texts.EXIT_BUTTON),
            on_click=return_main_menu,
            id='exit'
        ),
        state=Request.path_complete,
    )
