import datetime as dt
from typing import Dict, Any
from bson import ObjectId
from aiogram_dialog import DialogManager
import random

from config.mongo_config import battles, mobs, mob_meta
from services.mob_factory import generate_random_mob
from .utils import generate_mob_intro, QUOTES
from .constants import MAGIC_TYPE, DECK, DRAW_TEXTS, WIN_TEXTS, LOSE_TEXTS, DRAW_EFFECTS
from text_constants.battle_stories import SPELL_CAST_TEXT
from aiogram_dialog.api.entities import MediaAttachment, MediaId
from aiogram.enums import ContentType

WIN_TEXT = random.choice(WIN_TEXTS)
LOSE_TEXT = random.choice(LOSE_TEXTS)
DRAW_TEXT = random.choice(DRAW_TEXTS)

def cast_spell(spell_name: str, caster: str, is_mob: bool, is_player: bool) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"""
    if is_player:
        templates = [
            f"–¢—ã –ø—Ä–æ–∏–∑–Ω—ë—Å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b> ‚Äî –∏ –æ–Ω–æ",
            f"–°–ª–æ–≤–Ω–æ –≤ —Ç–∞–Ω—Ü–µ, —Ç—ã –≤—ã–∑–≤–∞–ª –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b>. –û–Ω–æ",
            f"–í–∑–º–∞—Ö —Ç–≤–æ–µ–π —Ä—É–∫–∏ ‚Äî –∏ —Ç—ã —Å–æ—Ç–∫–∞–ª –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b>. –û–Ω–æ",
            f"–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b> –æ–∂–∏–ª–æ –≤ —Ç–≤–æ–∏—Ö —É—Å—Ç–∞—Ö, –∏ –æ–Ω–æ",
            f"–¢—ã —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–ª –≤–æ–ª—é –Ω–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏ <b>¬´{spell_name}¬ª</b> ‚Äî —ç—Ç–æ",
            f"–°–ª–æ–≤–∞ —Å–∏–ª—ã —Å–æ—Ä–≤–∞–ª–∏—Å—å —Å —Ç–≤–æ–∏—Ö –≥—É–±: <b>¬´{spell_name}¬ª</b>! –û–Ω–æ",
            f"–¢—ã –Ω–∞–ø—Ä–∞–≤–∏–ª –º–∞–≥–∏—é –≤ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏ <b>¬´{spell_name}¬ª</b>, –∏ –æ–Ω–æ",
            f"–° –∂–µ—Å—Ç–æ–º –º–æ–≥—É—â–µ—Å—Ç–≤–∞ —Ç—ã –ø—Ä–∏–∑–≤–∞–ª –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b> ‚Äî –æ–Ω–æ"
        ]
    else:
        templates = [
            f"<b>{caster}</b> –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b> ‚Äî –∏",
            f"–°–ª–æ–≤–Ω–æ –≤ —Ç–∞–Ω—Ü–µ, <b>{caster}</b> –≤—ã–∑–≤–∞–ª–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b> –∏",
            f"–í–∑–º–∞—Ö —Ä—É–∫–∏ ‚Äî –∏ <b>{caster}</b> —Å–æ—Ç–∫–∞–ª–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b>. –í —Ç–æ—Ç –º–∏–≥",
            f"<b>{caster}</b> —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ –≤–æ–ª—é –Ω–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏ <b>¬´{spell_name}¬ª</b> ‚Äî",
            f"<b>{caster}</b> –Ω–∞–ø—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∏—é –≤ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏ <b>¬´{spell_name}¬ª</b>, –∏",
            f"–° –∂–µ—Å—Ç–æ–º –º–æ–≥—É—â–µ—Å—Ç–≤–∞ <b>{caster}</b> –ø—Ä–∏–∑–≤–∞–ª–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ <b>¬´{spell_name}¬ª</b> ‚Äî"
        ]
    base_sentence = random.choice(templates)
    if is_player and not is_mob:
        base_sentence += " –ø–æ–º–æ–≥–ª–æ —Ç–µ–±–µ –≤—ã–∏–≥—Ä–∞—Ç—å —Ä–∞—É–Ω–¥."
    elif is_mob and not is_player:
        base_sentence += " –º–∞–≥–∏—è —Å–∫–ª–æ–Ω–∏–ª–∞ –∏—Å—Ö–æ–¥ —Ä–∞—É–Ω–¥–∞ –≤ –µ—ë –ø–æ–ª—å–∑—É."
    else:
        base_sentence += " —ç–Ω–µ—Ä–≥–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —Ä–∞—Å—Ç–≤–æ—Ä–∏–ª–∞—Å—å, –æ—Å—Ç–∞–≤–∏–≤ –ª–∏—à—å –∂–∞—Ä –≤ –≤–æ–∑–¥—É—Ö–µ."
    return base_sentence

def get_stage_media(stage, meta_id):
    media_list = [
        {"type": "photo", "file_id": "https://picsum.photos/400/200?1"},
        {"type": "photo", "file_id": "https://picsum.photos/400/200?2"},
        {"type": "photo", "file_id": "https://picsum.photos/400/200?3"},
    ]
    try:
        meta_data = mob_meta.find_one({'_id': meta_id})
        images_list = meta_data['images']['actions'][stage]
        image_random = random.choice(images_list)
        image = MediaAttachment(ContentType.PHOTO, file_id=MediaId(image_random['telegram_file_id']))
        return (image, True)
    except:
        return ('', False)

def get_stage_image(stage, meta_id):
    try:
        meta_data = mob_meta.find_one({'_id': meta_id})
        images_list = meta_data['images'][stage]
        image_random = random.choice(images_list)
        image = MediaAttachment(ContentType.PHOTO, file_id=MediaId(image_random['telegram_file_id']))
        return (image, True)
    except:
        return ('', False)

async def get_mob_data(dialog_manager: DialogManager, **kwargs) -> Dict[str, str]:
    context = dialog_manager.current_context()
    mob_id = generate_random_mob()
    context.dialog_data["mob_id"] = str(mob_id)
    mob_data = mobs.find_one({"_id": mob_id})
    image, has_image = get_stage_image('presentation', mob_data.get('meta_id'))
    return {
        "enemy_intro": generate_mob_intro(mob_data),
        'image': image,
        'has_image': has_image
    }

def make_bar(
    total: int, max_value: int = 21, slots: int = 10, show_total: bool = True
) -> str:
    if total > max_value:
        bar = "üü•" * slots
    else:
        filled_ratio = total / max_value
        filled_slots = round(filled_ratio * slots)
        empty_slots = slots - filled_slots
        filled = (
            "üü™"
            if total == max_value
            else "üü©" if 13 <= total <= 17 else "üüß" if total > 17 else "üü®"
        ) * filled_slots
        bar = f"{filled}{'‚¨ú' * empty_slots}"
    return f"{bar} ({total})" if show_total else bar

def make_hitpoints_bar(hitpoints_left: int, total: int = 6) -> str:
    return "‚ù§Ô∏è" * hitpoints_left + "ü§ç" * (total - hitpoints_left)

async def get_battle_state(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    context = dialog_manager.current_context()
    battle_id = context.dialog_data["battle_id"]
    mob_id = context.dialog_data["mob_id"]
    battle = battles.find_one({"_id": ObjectId(battle_id)})
    player_hand = battle["player_state"]["hand"]
    mob_hand = battle["mob_state"]["hand"]
    mob_data = mobs.find_one({"_id": ObjectId(mob_id)})
    spell_cast_name = f'<b>{mob_data["name"]}</b> {random.choice(SPELL_CAST_TEXT)}'
    spell_cast_title = f'{mob_data["title"]} {random.choice(SPELL_CAST_TEXT)}'
    spell_cast = random.choice([spell_cast_name, spell_cast_title])
    player_bar = (
        "‚ÄºÔ∏è<b>–£—Ä–æ–≤–µ–Ω—å –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å–∏–ª—ã —Å–∫—Ä—ã—Ç. –¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –∫–æ–ª–¥–æ–≤–∞—Ç—å –≤—Å–ª–µ–ø—É—é. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω!</b>"
        if battle.get("fog_full", False)
        else make_bar(
            sum(card["power"] for card in player_hand),
            show_total=not battle.get("fog_partial", False),
        )
    )
    # Set image based on fog event
    meta_id = mob_data.get("meta_id")
    event_image, has_event_image = ('', False)
    if battle.get("fog_full", False):
        event_image, has_event_image = get_stage_image("demonstration_ass", meta_id)
    elif battle.get("fog_partial", False):
        event_image, has_event_image = get_stage_image("demonstration_breasts", meta_id)
    return {
        "player_bar": player_bar,
        "player_total": sum(card["power"] for card in player_hand),
        "mob_total": sum(card["power"] for card in mob_hand),
        "battle_id": str(battle_id),
        'spell_cast': spell_cast,
        "round_number": battle.get("round_number", 1),
        "player_hitpoints": make_hitpoints_bar(battle["player_state"].get("hitpoints_left", 6)),
        "mob_hitpoints": make_hitpoints_bar(battle["mob_state"].get("hitpoints_left", 6)),
        "mirror_event": battle.get("mirror_event", False),
        "fog_full": battle.get("fog_full", False),
        "fog_partial": battle.get("fog_partial", False),
        "player_message": battle["player_state"].get("message", ""),
        "event_image": event_image,
        "has_event_image": has_event_image,
    }

async def round_result_getter(dialog_manager: DialogManager, **kwargs) -> Dict[str, Any]:
    context = dialog_manager.current_context()
    battle_id = context.dialog_data["battle_id"]
    mob_id = context.dialog_data["mob_id"]
    battle = battles.find_one({"_id": ObjectId(battle_id)})
    round_number = str(battle.get("round_number", 1))
    round_data = battle.get("rounds", {}).get(round_number, {})

    winner = round_data.get("winner")
    mob_hitpoints_removed = round_data.get("mob_hitpoints_removed", 0)
    player_hitpoints_removed = round_data.get("player_hitpoints_removed", 0)
    mob_data = mobs.find_one({"_id": ObjectId(mob_id)})
    if winner == 'player':
        try:
            spell_name = battle['player_state']['hand'][-1].get('name')
        except:
            spell_name = '–ò—Å–∫—Ä—ã –°—Ç—Ä–∞—Å—Ç–∏'
        round_text = cast_spell(spell_name, mob_data.get('name', '–û—Ñ–µ–ª–∏—è'), is_mob=False, is_player=True)
        mob_phrase = random.choice(QUOTES['hurt'][mob_data['persona']])
    elif winner == 'mob':
        try:
            spell_name = battle['player_state']['hand'][-1].get('name')
        except:
            spell_name = '–ò—Å–∫—Ä—ã –°—Ç—Ä–∞—Å—Ç–∏'
        round_text = cast_spell(spell_name, mob_data.get('name', '–û—Ñ–µ–ª–∏—è'), is_mob=True, is_player=False)
        mob_phrase = random.choice(QUOTES['cast'][mob_data['persona']])
    else:
        round_text = random.choice(DRAW_EFFECTS)
        round_text += ' –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∏—á–µ–π–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.'
        mob_phrase = random.choice(QUOTES["draw"][mob_data["persona"]])
    event_text = (battle.get("event_description", "") if battle['mirror_event'] == True else '')
    player_total = sum(card["power"] for card in battle["player_state"]["hand"])
    mob_total = sum(card["power"] for card in battle["mob_state"]["hand"])
    if battle.get("mirror_event", False):
        player_total, mob_total = mob_total, player_total

    if not round_data.get("text"):
        battles.update_one(
            {"_id": battle["_id"]},
            {"$set": {f"rounds.{round_number}.text": round_text}},
        )
    return {
        "winner": winner,
        "player_hitpoints": battle["player_state"].get("hitpoints_left", 6),
        "mob_hitpoints": battle["mob_state"].get("hitpoints_left", 6),
        "mob_hitpoints_removed": mob_hitpoints_removed,
        "player_hitpoints_removed": player_hitpoints_removed,
        "hitpoints_remove_text": f'{round_text}\n'.strip(),
        'mob_phrase': mob_phrase,
        'event_text': event_text,
        "player_bar": make_bar(player_total),
        "mob_bar": make_bar(mob_total),
        "player_message": battle["player_state"].get("message", ""),
    }

async def get_battle_result(dialog_manager: DialogManager, **kwargs) -> Dict[str, str]:
    context = dialog_manager.current_context()
    battle_id = context.dialog_data["battle_id"]
    battle = battles.find_one({"_id": ObjectId(battle_id)})
    winner = battle.get("battle_winner")
    mob_id = context.dialog_data["mob_id"]
    mob_data = mobs.find_one({"_id": ObjectId(mob_id)})
    if winner == 'player':
        image, has_image = get_stage_image('defeat', mob_data.get('meta_id'))
    elif winner == 'mob':
        image, has_image = get_stage_image('victory', mob_data.get('meta_id'))
    else:
        image, has_image = get_stage_image('demonstration_legs', mob_data.get('meta_id'))
    result_text = (
        WIN_TEXT if winner == "player" else LOSE_TEXT if winner == "mob" else DRAW_TEXT
    )
    return {
        "result_text": result_text,
        'has_image': has_image,
        'image': image
    }

async def get_magic_types(dialog_manager: DialogManager, **kwargs) -> Dict[str, list]:
    return {"magic_types": MAGIC_TYPE}
