import datetime as dt
import random

from aiogram_dialog import DialogManager
from bson import ObjectId
from dateutil.relativedelta import relativedelta

from config.mongo_config import battles, mobs, players
from services.mob_factory import generate_random_mob, get_random_mob_for_player
from utils import constants as const


def generate_enemy_introduction(mob_data):
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è APPEARANCE
    appearance_key = None
    for key in const.APPEARANCE.keys():
        if key in mob_data['descriptors']['appearance'].lower():
            appearance_key = key
            break
    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not appearance_key:
        appearance_key = '—É–ª—ã–±–∫–∞'
    # –°–±–æ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    intro_parts = [
        f"–ü–µ—Ä–µ–¥ –≤–∞–º–∏ <b>{mob_data['name']}</b> - {mob_data['title']} {mob_data['sub_title']}.\n",
        f"<i>{random.choice(const.APPEARANCE[appearance_key])}.</i>",
        f"<i>{random.choice(const.BODY_DESCRIPTIONS)}.</i>"
    ]
    mob_entry_phrase = mob_data['quotes']['entry']
    intro_parts.append(f"\n<blockquote>{mob_entry_phrase}</blockquote>\n")
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç—Ä–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞
    intro_parts.append(f'{random.choice(const.FINAL_TOUCH)} {random.choice(const.EPIGRAPH_PHRASES)}')
    return "\n".join(intro_parts)


async def get_mob_data(dialog_manager: DialogManager, **kwargs):
    context = dialog_manager.current_context()
    mob_id = generate_random_mob()
    context.dialog_data.update(mob_id=str(mob_id))
    mob_data = mobs.find_one({"_id": ObjectId(mob_id)})
    if not mob_data:
        return {"desc": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ"}
    enemy_intro = generate_enemy_introduction(mob_data)
    return {"enemy_intro": enemy_intro}


async def get_battle_state(dialog_manager: DialogManager, **kwargs):
    context = dialog_manager.current_context()
    battle_id = context.dialog_data["battle_id"]
    battle = battles.find_one({"_id": ObjectId(battle_id)})

    player_hand = battle["player_state"]["hand"]
    mob_hand = battle["mob_state"]["hand"]

    total = sum(card["power"] for card in player_hand)
    mob_total = sum(card["power"] for card in mob_hand)

    player_bar = "‚ñì" * (total // 2) + "‚ñë" * ((21 - total) // 2)
    # mob_bar = "‚ñì" * (mob_total // 2) + "‚ñë" * ((21 - mob_total) // 2)

    # spell_names = ", ".join(f"{c['name']} ({c['power']})" for c in player_hand)

    return {
        "player_bar": f"üíñ –¢—ã: {player_bar} ({total})",
        # "mob_bar": f"üñ§ –û–Ω–∞: {mob_bar} ({mob_total})",
        # "spells": spell_names,
        "battle_id": str(battle_id)
    }
